#!/usr/bin/env python3
"""
üß™ SCRIPT TESTARE LOCALƒÇ - Telegram Video Downloader Bot
Versiunea: 2.0.0 - SECURIZAT
Data: 2025-01-12

TesteazƒÉ func»õionalitatea botului local √Ænainte de deploy.
Includes comprehensive security and functionality checks.
"""

import os
import sys
import asyncio
import logging
from pathlib import Path
import subprocess
import json
from telegram import Bot
from telegram.ext import Application

# Configurare logging pentru teste
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Token-ul botului
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
if not TOKEN:
    print("‚ùå TELEGRAM_BOT_TOKEN nu este setat √Æn variabilele de mediu")
    sys.exit(1)

def check_environment():
    """VerificƒÉ configurarea mediului de dezvoltare."""
    print("üîç Verificare mediu de dezvoltare...")
    
    # VerificƒÉ Python version
    python_version = sys.version_info
    if python_version.major != 3 or python_version.minor < 11:
        print(f"‚ùå Python {python_version.major}.{python_version.minor} detectat. NecesitƒÉ Python 3.11+")
        return False
    print(f"‚úÖ Python {python_version.major}.{python_version.minor}.{python_version.micro}")
    
    # VerificƒÉ fi»ôierul .env
    env_file = Path('.env')
    if not env_file.exists():
        print("‚ùå Fi»ôierul .env nu existƒÉ!")
        print("üí° CopiazƒÉ .env.example ca .env »ôi completeazƒÉ valorile")
        return False
    print("‚úÖ Fi»ôierul .env existƒÉ")
    
    # √éncarcƒÉ variabilele de mediu
    try:
        from dotenv import load_dotenv
        load_dotenv()
        print("‚úÖ Variabile de mediu √ÆncƒÉrcate")
    except ImportError:
        print("‚ùå python-dotenv nu este instalat")
        return False
    
    # VerificƒÉ token-ul Telegram
    token = os.getenv('TELEGRAM_BOT_TOKEN')
    if not token:
        print("‚ùå TELEGRAM_BOT_TOKEN nu este setat √Æn .env")
        return False
    if not token.startswith('your_telegram_bot_token_here'):
        print("‚úÖ TELEGRAM_BOT_TOKEN este configurat")
    else:
        print("‚ùå TELEGRAM_BOT_TOKEN nu este actualizat √Æn .env")
        return False
    
    return True

def check_dependencies():
    """VerificƒÉ dependen»õele Python."""
    print("\nüì¶ Verificare dependen»õe...")
    
    required_packages = [
        'flask',
        'python-telegram-bot', 
        'yt-dlp',
        'requests',
        'cryptography',
        'python-dotenv'
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"‚úÖ {package}")
        except ImportError:
            print(f"‚ùå {package} - LIPSE»òTE")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\nüí° InstaleazƒÉ pachetele lipsƒÉ: pip install {' '.join(missing_packages)}")
        return False
    
    return True

def test_downloader():
    """TesteazƒÉ func»õionalitatea de descƒÉrcare."""
    print("\nüé¨ Testare func»õionalitate descƒÉrcare...")
    
    try:
        from downloader import is_supported_url, download_video
        
        # Test URL-uri suportate
        test_urls = [
            'https://www.facebook.com/watch?v=123456789',
            'https://www.instagram.com/p/ABC123/',
            'https://www.tiktok.com/@user/video/123456789',
            'https://twitter.com/user/status/123456789',
            'https://www.youtube.com/watch?v=dQw4w9WgXcQ'  # Ar trebui sƒÉ fie nesuportat
        ]
        
        for url in test_urls:
            is_supported = is_supported_url(url)
            platform = url.split('/')[2]
            status = "‚úÖ Suportat" if is_supported else "‚ùå Nu este suportat"
            print(f"  {platform}: {status}")
        
        print("‚úÖ Func»õia de verificare URL func»õioneazƒÉ")
        return True
        
    except Exception as e:
        print(f"‚ùå Eroare la testarea downloader-ului: {e}")
        return False

def test_telegram_connection():
    """TesteazƒÉ conexiunea cu Telegram API."""
    print("\nü§ñ Testare conexiune Telegram...")
    
    try:
        from telegram import Bot
        
        token = os.getenv('TELEGRAM_BOT_TOKEN')
        bot = Bot(token)
        
        # Test simplu - ob»õine informa»õii despre bot
        import asyncio
        
        async def test_bot():
            try:
                me = await bot.get_me()
                print(f"‚úÖ Bot conectat: @{me.username} ({me.first_name})")
                return True
            except Exception as e:
                print(f"‚ùå Eroare conexiune Telegram: {e}")
                return False
        
        return asyncio.run(test_bot())
        
    except Exception as e:
        print(f"‚ùå Eroare la testarea conexiunii Telegram: {e}")
        return False

def test_security():
    """TesteazƒÉ mƒÉsurile de securitate."""
    print("\nüîê Verificare securitate...")
    
    security_checks = []
    
    # VerificƒÉ cƒÉ token-ul nu este hardcodat
    sensitive_files = ['app.py', 'bot.py', 'downloader.py']
    for file_path in sensitive_files:
        if Path(file_path).exists():
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                if 'BOT_TOKEN = "' in content and ':' in content:
                    print(f"‚ùå Token hardcodat gƒÉsit √Æn {file_path}")
                    security_checks.append(False)
                else:
                    print(f"‚úÖ {file_path} - fƒÉrƒÉ token-uri hardcodate")
                    security_checks.append(True)
    
    # VerificƒÉ cƒÉ .env nu este √Æn git
    gitignore_path = Path('.gitignore')
    if gitignore_path.exists():
        with open(gitignore_path, 'r') as f:
            gitignore_content = f.read()
            if '.env' in gitignore_content:
                print("‚úÖ .env este √Æn .gitignore")
                security_checks.append(True)
            else:
                print("‚ùå .env nu este √Æn .gitignore")
                security_checks.append(False)
    
    return all(security_checks)

async def test_bot_initialization():
    """TesteazƒÉ ini»õializarea bot-ului"""
    print("üîß TESTARE INI»öIALIZARE BOT")
    print("=" * 40)
    
    try:
        # CreeazƒÉ bot-ul
        bot = Bot(TOKEN)
        print("‚úÖ Bot creat cu succes")
        
        # TesteazƒÉ conexiunea
        me = await bot.get_me()
        print(f"‚úÖ Bot conectat: {me.first_name} (@{me.username})")
        
        # CreeazƒÉ aplica»õia
        application = Application.builder().token(TOKEN).build()
        print("‚úÖ Aplica»õie creatƒÉ cu succes")
        
        # Ini»õializeazƒÉ aplica»õia
        await application.initialize()
        print("‚úÖ Aplica»õie ini»õializatƒÉ cu succes")
        
        # TesteazƒÉ webhook info
        webhook_info = await bot.get_webhook_info()
        print(f"üìã Webhook actual: {webhook_info.url or 'Nu este setat'}")
        
        # Cleanup
        await application.shutdown()
        print("‚úÖ Aplica»õie √ÆnchisƒÉ corect")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Eroare: {e}")
        return False

async def test_webhook_setting():
    """TesteazƒÉ setarea webhook-ului"""
    print("\nüîó TESTARE SETARE WEBHOOK")
    print("=" * 40)
    
    webhook_url = "https://telegram-video-downloader-1471.onrender.com/webhook"
    
    try:
        bot = Bot(TOKEN)
        
        # SeteazƒÉ webhook-ul
        result = await bot.set_webhook(url=webhook_url)
        if result:
            print(f"‚úÖ Webhook setat cu succes: {webhook_url}")
        else:
            print("‚ùå Nu s-a putut seta webhook-ul")
            
        # VerificƒÉ webhook-ul
        webhook_info = await bot.get_webhook_info()
        print(f"üìã Webhook verificat: {webhook_info.url}")
        print(f"üìä Pending updates: {webhook_info.pending_update_count}")
        if webhook_info.last_error_message:
            print(f"‚ö†Ô∏è Ultima eroare: {webhook_info.last_error_message}")
        else:
            print("‚úÖ Nicio eroare")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Eroare la setarea webhook: {e}")
        return False

def test_import_app():
    """TesteazƒÉ importul aplica»õiei principale"""
    print("\nüì¶ TESTARE IMPORT APLICA»öIE")
    print("=" * 40)
    
    try:
        # TesteazƒÉ importul
        import app
        print("‚úÖ Aplica»õia a fost importatƒÉ cu succes")
        
        # VerificƒÉ cƒÉ aplica»õia este ini»õializatƒÉ
        if hasattr(app, 'application'):
            print("‚úÖ Aplica»õia Telegram este disponibilƒÉ")
        else:
            print("‚ùå Aplica»õia Telegram nu este disponibilƒÉ")
            
        return True
        
    except Exception as e:
        print(f"‚ùå Eroare la importul aplica»õiei: {e}")
        return False

def main():
    """Func»õia principalƒÉ de testare."""
    print("üß™ TESTARE LOCALƒÇ - Telegram Video Downloader Bot")
    print("=" * 60)
    
    tests = [
        ("Mediu de dezvoltare", check_environment),
        ("Dependen»õe Python", check_dependencies), 
        ("Func»õionalitate descƒÉrcare", test_downloader),
        ("Conexiune Telegram", test_telegram_connection),
        ("Securitate", test_security)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Eroare √Æn testul '{test_name}': {e}")
            results.append((test_name, False))
    
    # Sumar rezultate
    print("\n" + "=" * 60)
    print("üìä SUMAR TESTE:")
    
    all_passed = True
    for test_name, result in results:
        status = "‚úÖ TRECUT" if result else "‚ùå E»òUAT"
        print(f"  {test_name}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 60)
    if all_passed:
        print("üéâ TOATE TESTELE AU TRECUT! Botul este gata pentru deploy.")
        print("\nüìã Pa»ôi urmƒÉtori:")
        print("1. VerificƒÉ din nou toate configurƒÉrile")
        print("2. TesteazƒÉ manual cu c√¢teva URL-uri")
        print("3. Deploy pe Render folosind render.yaml")
    else:
        print("‚ö†Ô∏è UNELE TESTE AU E»òUAT! RezolvƒÉ problemele √Ænainte de deploy.")
        print("\nüí° VerificƒÉ mesajele de eroare de mai sus pentru detalii.")
    
    return all_passed

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)